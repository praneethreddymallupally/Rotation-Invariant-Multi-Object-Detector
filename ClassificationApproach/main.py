# -*- coding: utf-8 -*-
"""BasePaper1Impl.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qk8ufpq17bYrBJ2cNWxxOtGN-L8b2lbK
"""

!pip install wget

from __future__ import print_function

import os
import sys
import matplotlib.pyplot as plt

from keras.applications.imagenet_utils import preprocess_input
from keras.models import load_model

sys.path.append('/content/drive/My Drive/MajorProjectBP1/RotNet-master - Copy/')
from utils import display_examples, ImageDataGenerator, angle_error, test_my_model,test_accuracies
from data.street_view import get_filenames

model = load_model('/content/drive/MyDrive/MajorProjectBP1/RotNet-master - Copy/resnet50_newDS.hdf5', custom_objects={'angle_error': angle_error})

model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=[angle_error])

test_filenames = get_filenames("/content/drive/MyDrive/MajorProjectBP1/RotNet-master - Copy/data/street_view")[1]

test_my_model(
    model, 
    test_filenames,
    num_images=1,
    size=(224, 224),
    crop_largest_rect=True,
    preprocess_func=preprocess_input,
)

import sys
sys.path.append('/content/drive/My Drive/MajorProjectBP1/RotNet-master - Copy/')

test_accuracies(
    model, 
    test_filenames,
    num_images=500,
    size=(224, 224),
    crop_largest_rect=True,
    preprocess_func=preprocess_input,
)

!python3 "/content/drive/My Drive/MajorProjectBP1/RotNet-master - Copy/train/train_street_view.py"

import zipfile
with zipfile.ZipFile('/content/drive/MyDrive/MajorProjectBP1/Dataset/archive.zip','r') as z:
  z.extractall('/content/drive/MyDrive/MajorProjectBP1/Dataset/')

!ls

num_images = 5

display_examples(
    model, 
    test_filenames,
    num_images=num_images,
    size=(224, 224),
    crop_center=True,
    crop_largest_rect=True,
    preprocess_func=preprocess_input,
)

#Using Resnet50 as it is for image classification
import numpy as np
from keras.preprocessing import image
from keras.preprocessing.image import img_to_array
from keras.applications import ResNet50
from keras.applications.resnet50 import preprocess_input
from keras.applications.imagenet_utils import decode_predictions
import matplotlib.pyplot as plt
import cv2

img = image.load_img('/content/drive/MyDrive/MajorProjectBP1/Dataset/Good Dog Images/hairless nice dog images/n02087046_1386.jpg', target_size = (224, 224))
# plt.imshow(img)
img = image.img_to_array(img)
img = np.expand_dims(img, axis=0)
img = preprocess_input(img)

renet50model = ResNet50(weights='imagenet')
preds = renet50model.predict(img)
temp=decode_predictions(preds, top=1)[0]
print('Predicted:', temp)
print(temp[0][2])

print('Overall Predictino Accuracy:',0.6014532617032528/0.6865243869423866)

import matplotlib.pyplot as plt
plt.imshow(test_filenames[0])

# Bring the file into the local Python environment.
execfile('/content/drive/MyDrive/MajorProjectBP1/RotNet-master - Copy/utils.py')

# Call the function defined in the file.
def test_my_model(model, input, num_images=5, size=None, crop_center=False,
                     crop_largest_rect=False, preprocess_func=None, save_path=None):
    """
    Given a model that predicts the rotation angle of an image,
    and a NumPy array of images or a list of image paths, display
    the specified number of example images in three columns:
    Original, Rotated and Corrected.
    """

    if isinstance(input, (np.ndarray)):
        images = input
        N, h, w = images.shape[:3]
        if not size:
            size = (h, w)
        indexes = np.random.choice(N, num_images)
        images = images[indexes, ...]
    else:
        images = []
        filenames = input
        N = len(filenames)
        indexes = np.random.choice(N, num_images)
        for i in indexes:
            image = cv2.imread(filenames[i])
            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            images.append(image)
        images = np.asarray(images)

    x = []
    y = []
    for image in images:
        rotation_angle = np.random.randint(90,270)
        rotated_image = generate_rotated_image(
            image,
            rotation_angle,
            size=size,
            crop_center=crop_center,
            crop_largest_rect=crop_largest_rect
        )
        x.append(rotated_image)
        y.append(rotation_angle)

    x = np.asarray(x, dtype='float32')
    y = np.asarray(y, dtype='float32')

    if x.ndim == 3:
        x = np.expand_dims(x, axis=3)

    y = to_categorical(y, 360)

    x_rot = np.copy(x)

    if preprocess_func:
        x = preprocess_func(x)

    y = np.argmax(y, axis=1)
    y_pred = np.argmax(model.predict(x), axis=1)
    renet50model = ResNet50(weights='imagenet')
    for rotated_image, true_angle, predicted_angle in zip(x_rot, y, y_pred):
        original_image = rotate(rotated_image, -true_angle)
        if crop_largest_rect:
            original_image = crop_largest_rectangle(original_image, -true_angle, *size)

        corrected_image = rotate(rotated_image, -predicted_angle)
        if crop_largest_rect:
            corrected_image = crop_largest_rectangle(corrected_image, -predicted_angle, *size)

        if x.shape[3] == 1:
            options = {'cmap': 'gray'}
        else:
            options = {}

        print('For image:')
        img = image.load_img(rotated_image, target_size = (224, 224))
        plt.imshow(img)
        img = image.img_to_array(img)
        img = np.expand_dims(img, axis=0)
        img = preprocess_input(img)
        print('Resnet50 prediction: ',decode_predictions(renet50model.predict(img), top=1)[0])
        print('Corrected Image by our model')
        img = image.load_img(corrected_image, target_size = (224, 224))
        plt.imshow(img)
        img = image.img_to_array(img)
        img = np.expand_dims(img, axis=0)
        img = preprocess_input(img)
        print('Resnet50 prediction: ',decode_predictions(renet50model.predict(img), top=1)[0])

num_images = 5
execfile('/content/drive/MyDrive/MajorProjectBP1/RotNet-master - Copy/utils.py')
import warnings
warnings.filterwarnings('ignore')
test_my_model(
    model, 
    test_filenames,
    num_images=num_images,
    size=(224, 224),
    crop_center=True,
    crop_largest_rect=True,
    preprocess_func=preprocess_input,
)